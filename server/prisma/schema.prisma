generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model city {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  city String @db.VarChar(40)
  post post[]
}

model contact {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  post_id Int    @db.UnsignedInt
  name    String @db.VarChar(15)
  info    String @db.VarChar(255)
  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contact_ibfk_1")

  @@index([post_id], map: "post_id")
}

model filter {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  title       String        @db.VarChar(30)
  post_filter post_filter[]
}

model permission {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  title           String            @db.VarChar(10)
  description     String?           @db.VarChar(255)
  role_permission role_permission[]
}

model photo {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  post_id Int    @db.UnsignedInt
  photo   String @db.VarChar(255)
  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "photo_ibfk_1")

  @@index([post_id], map: "post_id")
}

model post {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int           @db.UnsignedInt
  city_id     Int           @db.UnsignedInt
  pet_name    String        @db.VarChar(30)
  description String        @db.Text
  created     DateTime      @db.Date
  status      String        @db.VarChar(10)
  valid       String        @db.VarChar(10)
  contact     contact[]
  photo       photo[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_ibfk_1")
  city        city          @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_ibfk_2")
  post_filter post_filter[]

  @@index([city_id], map: "city_id")
  @@index([user_id], map: "user_id")
}

model post_filter {
  post_id   Int    @db.UnsignedInt
  filter_id Int    @db.UnsignedInt
  post      post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_filter_ibfk_1")
  filter    filter @relation(fields: [filter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_filter_ibfk_2")

  @@id([post_id, filter_id])
  @@index([filter_id], map: "filter_id")
}

model role {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  title           String            @db.VarChar(10)
  role_permission role_permission[]
  user_role       user_role[]
}

model role_permission {
  role_id       Int        @db.UnsignedInt
  permission_id Int        @db.UnsignedInt
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_ibfk_1")
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_ibfk_2")

  @@id([role_id, permission_id])
  @@index([permission_id], map: "permission_id")
}

model user {
  id        Int         @id @default(autoincrement()) @db.UnsignedInt
  username  String      @db.VarChar(30)
  password  String      @db.VarChar(255)
  email     String      @db.VarChar(40)
  post      post[]
  user_role user_role[]
}

model user_role {
  user_id Int  @db.UnsignedInt
  role_id Int  @db.UnsignedInt
  role    role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_ibfk_1")
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_ibfk_2")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_id")
}
