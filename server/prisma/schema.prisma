// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model city {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(40)
  post post[]
}

model permission {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  title           String            @db.VarChar(10)
  description     String?           @db.VarChar(255)
  role_permission role_permission[]
}

model role {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  title           String            @db.VarChar(10)
  role_permission role_permission[]
  user_role       user_role[]
}

model user {
  id                Int              @id @default(autoincrement()) @db.UnsignedInt
  username          String           @unique @db.VarChar(30)
  password          String           @db.VarChar(255)
  email             String           @unique @db.VarChar(40)
  post              post[]
  user_role         user_role[]
  password_reset    password_reset[]
  creator           message[]        @relation("creator")
  recipient         message[]        @relation("recipient")
  sent_messages     message[]        @relation("sent_messages")
  received_messages message[]        @relation("received_messages")
}

model password_reset {
  user_id Int      @db.UnsignedInt
  token   String   @db.VarChar(255)
  expires DateTime
  user    user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "password_reset_ibfk_1")

  @@id([user_id, token])
  @@index([user_id])
}

model species {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  name                   String                   @db.VarChar(30)
  post                   post[]
  species_characteristic species_characteristic[]
}

model characteristic {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  name                   String                   @db.VarChar(30)
  option                 option[]
  species_characteristic species_characteristic[]
}

model option {
  id                Int            @id @default(autoincrement()) @db.UnsignedInt
  characteristic_id Int            @db.UnsignedInt
  value             String         @db.VarChar(255)
  characteristic    characteristic @relation(fields: [characteristic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "option_ibfk_1")
  post_option       post_option[]
}

model species_characteristic {
  species_id        Int            @db.UnsignedInt
  characteristic_id Int            @db.UnsignedInt
  species           species        @relation(fields: [species_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "species_characteristic_ibfk_1")
  characteristic    characteristic @relation(fields: [characteristic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "species_characteristic_ibfk_2")

  @@id([species_id, characteristic_id])
  @@index([characteristic_id], map: "characteristic_id")
}

model post {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int           @db.UnsignedInt
  city_id     Int           @db.UnsignedInt
  species_id  Int           @db.UnsignedInt
  pet_name    String        @db.VarChar(30)
  description String        @db.Text
  created     DateTime      @default(now())
  status      Int           @default(0)
  valid_until DateTime      @default(now())
  contact     contact[]
  photo       photo[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_ibfk_1")
  city        city          @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_ibfk_2")
  species     species       @relation(fields: [species_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_ibfk_3")
  post_option post_option[]

  @@index([city_id], map: "city_id")
  @@index([user_id], map: "user_id")
}

model message {
  creator_id Int      @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  message    String   @db.Text
  date       DateTime
  creator    user     @relation("creator", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_creator_relation")
  user       user     @relation("recipient", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_user_relation")
  sender     user?    @relation("sent_messages", fields: [creator_id], references: [id])
  receiver   user?    @relation("received_messages", fields: [user_id], references: [id])

  @@id([user_id, creator_id])
  @@index([creator_id], map: "creator_id")
}

model contact {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  post_id Int    @db.UnsignedInt
  name    String @db.VarChar(15)
  info    String @db.VarChar(255)
  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contact_ibfk_1")

  @@index([post_id], map: "post_id")
}

model photo {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  post_id Int    @db.UnsignedInt
  photo   String @db.VarChar(255)
  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "photo_ibfk_1")

  @@index([post_id], map: "post_id")
}

model post_option {
  post_id   Int    @db.UnsignedInt
  option_id Int    @db.UnsignedInt
  post      post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_filter_ibfk_1")
  option    option @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_filter_ibfk_2")

  @@id([post_id, option_id])
  @@index([option_id], map: "filter_id")
}

model role_permission {
  role_id       Int        @db.UnsignedInt
  permission_id Int        @db.UnsignedInt
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_ibfk_1")
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_ibfk_2")

  @@id([role_id, permission_id])
  @@index([permission_id], map: "permission_id")
}

model user_role {
  user_id Int  @db.UnsignedInt
  role_id Int  @db.UnsignedInt
  role    role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_ibfk_1")
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_ibfk_2")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_id")
}
